// <auto-generated />
using System;
using Cerberus.Dashboard.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Cerberus.Dashboard.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220114093601_AddedRelationsToInstitutes")]
    partial class AddedRelationsToInstitutes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreateUserId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsThirdParty")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUserId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("OTPTokenExpires")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OTPVerification")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("StaffNumber")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ThirdPartyProvider")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.AccountRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateUserId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUserId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccountRoles");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreateUserId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUserId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PhysicalAddressCity")
                        .HasColumnType("text");

                    b.Property<string>("PhysicalAddressLine1")
                        .HasColumnType("text");

                    b.Property<string>("PhysicalAddressLine2")
                        .HasColumnType("text");

                    b.Property<string>("PhysicalAddressLine3")
                        .HasColumnType("text");

                    b.Property<string>("PhysicalAddressPostalCode")
                        .HasColumnType("text");

                    b.Property<string>("PostalAddressCity")
                        .HasColumnType("text");

                    b.Property<string>("PostalAddressLine1")
                        .HasColumnType("text");

                    b.Property<string>("PostalAddressLine2")
                        .HasColumnType("text");

                    b.Property<string>("PostalAddressLine3")
                        .HasColumnType("text");

                    b.Property<string>("PostalAddressPostalCode")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Addresss");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<string>("ApplicationDate")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationStage")
                        .HasColumnType("text");

                    b.Property<string>("CreateUserId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Ethnicity")
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDisable")
                        .HasColumnType("boolean");

                    b.Property<string>("Lastname")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUserId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.CompletedApplicationAnalytic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AnalyticType")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateRecord")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("FacultyId")
                        .HasColumnType("integer");

                    b.Property<int>("InstituteId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastDateRecord")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastSum")
                        .HasColumnType("integer");

                    b.Property<int>("Sum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CompletedApplicationAnalytic");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.CourseTypeApplicationAnalytic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AnalyticType")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateRecord")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("FacultyId")
                        .HasColumnType("integer");

                    b.Property<int>("InstituteId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastDateRecord")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastSum")
                        .HasColumnType("integer");

                    b.Property<int>("Sum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CourseTypeApplicationAnalytic");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.Courses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateUserId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUserId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Preference")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreateUserId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUserId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.DistributionApplicationAnalytic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("APS")
                        .HasColumnType("integer");

                    b.Property<string>("AnalyticType")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateRecord")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("FacultyId")
                        .HasColumnType("integer");

                    b.Property<int>("InstituteId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastDateRecord")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastSum")
                        .HasColumnType("integer");

                    b.Property<int>("Sum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("DistributionApplicationAnalytic");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreateUserId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUserId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Faculty");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.FacultyApplicationAnalytic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AnalyticType")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateRecord")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("FacultyId")
                        .HasColumnType("integer");

                    b.Property<string>("FacultyName")
                        .HasColumnType("text");

                    b.Property<int>("InstituteId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastDateRecord")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastSum")
                        .HasColumnType("integer");

                    b.Property<int>("Sum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FacultyApplicationAnalytic");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.FeederSchoolApplicationAnalytic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AnalyticType")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateRecord")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("FacultyId")
                        .HasColumnType("integer");

                    b.Property<string>("FeederSchoolName")
                        .HasColumnType("text");

                    b.Property<int>("InstituteId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastDateRecord")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastSum")
                        .HasColumnType("integer");

                    b.Property<string>("Quintile")
                        .HasColumnType("text");

                    b.Property<int>("Sum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FeederSchoolApplicationAnalytic");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.GenderApplicationAnalytic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AnalyticType")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateRecord")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("FacultyId")
                        .HasColumnType("integer");

                    b.Property<int>("InstituteId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastDateRecord")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastSum")
                        .HasColumnType("integer");

                    b.Property<int>("Sum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GenderApplicationAnalytic");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<string>("CreateUserId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMainCampus")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUserId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PostCode")
                        .HasColumnType("text");

                    b.Property<string>("Province")
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.LocationApplicationAnalytic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AnalyticType")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateRecord")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("FacultyId")
                        .HasColumnType("integer");

                    b.Property<int>("InstituteId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastDateRecord")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastSum")
                        .HasColumnType("integer");

                    b.Property<int>("Sum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("LocationApplicationAnalytic");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreateUserId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUserId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PermissionName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateUserId = "builder.seed",
                            CreatedDate = new DateTime(2022, 1, 14, 11, 36, 1, 381, DateTimeKind.Local).AddTicks(8195),
                            Description = "Has a super user access level granted can do anything",
                            IsActive = true,
                            ModifyDate = new DateTime(2022, 1, 14, 11, 36, 1, 381, DateTimeKind.Local).AddTicks(8209),
                            ModifyUserId = "builder.seed",
                            PermissionName = "All",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateUserId = "builder.seed",
                            CreatedDate = new DateTime(2022, 1, 14, 11, 36, 1, 381, DateTimeKind.Local).AddTicks(8213),
                            Description = "Can do basic things not everything",
                            IsActive = true,
                            ModifyDate = new DateTime(2022, 1, 14, 11, 36, 1, 381, DateTimeKind.Local).AddTicks(8214),
                            ModifyUserId = "builder.seed",
                            PermissionName = "Basic",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreateUserId = "builder.seed",
                            CreatedDate = new DateTime(2022, 1, 14, 11, 36, 1, 381, DateTimeKind.Local).AddTicks(8216),
                            Description = "Can only view data can not modify data",
                            IsActive = true,
                            ModifyDate = new DateTime(2022, 1, 14, 11, 36, 1, 381, DateTimeKind.Local).AddTicks(8217),
                            ModifyUserId = "builder.seed",
                            PermissionName = "ViewOnly",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.PipelineApplicationAnalytic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AnalyticType")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateRecord")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("FacultyId")
                        .HasColumnType("integer");

                    b.Property<int>("InstituteId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastDateRecord")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastSum")
                        .HasColumnType("integer");

                    b.Property<int>("Sum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PipelineApplicationAnalytic");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.RaceApplicationAnalytic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AnalyticType")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateRecord")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("FacultyId")
                        .HasColumnType("integer");

                    b.Property<int>("InstituteId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastDateRecord")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LastSum")
                        .HasColumnType("integer");

                    b.Property<int>("Sum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("RaceApplicationAnalytic");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreateUserId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUserId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("RoleName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateUserId = "builder.seed",
                            CreatedDate = new DateTime(2022, 1, 14, 11, 36, 1, 378, DateTimeKind.Local).AddTicks(7040),
                            Description = "An administrator role normaly does everything",
                            IsActive = true,
                            ModifyDate = new DateTime(2022, 1, 14, 11, 36, 1, 380, DateTimeKind.Local).AddTicks(5811),
                            ModifyUserId = "builder.seed",
                            RoleName = "Admin",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateUserId = "builder.seed",
                            CreatedDate = new DateTime(2022, 1, 14, 11, 36, 1, 380, DateTimeKind.Local).AddTicks(6513),
                            Description = "An dean role of the university generaly views only.",
                            IsActive = true,
                            ModifyDate = new DateTime(2022, 1, 14, 11, 36, 1, 380, DateTimeKind.Local).AddTicks(6516),
                            ModifyUserId = "builder.seed",
                            RoleName = "Dean",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreateUserId = "builder.seed",
                            CreatedDate = new DateTime(2022, 1, 14, 11, 36, 1, 380, DateTimeKind.Local).AddTicks(6519),
                            Description = "An dean role of the university views their own department.",
                            IsActive = true,
                            ModifyDate = new DateTime(2022, 1, 14, 11, 36, 1, 380, DateTimeKind.Local).AddTicks(6520),
                            ModifyUserId = "builder.seed",
                            RoleName = "Lecturer",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreateUserId = "builder.seed",
                            CreatedDate = new DateTime(2022, 1, 14, 11, 36, 1, 380, DateTimeKind.Local).AddTicks(6522),
                            Description = "An Faculty officer role of the university views their own faculty.",
                            IsActive = true,
                            ModifyDate = new DateTime(2022, 1, 14, 11, 36, 1, 380, DateTimeKind.Local).AddTicks(6523),
                            ModifyUserId = "builder.seed",
                            RoleName = "Faculty Officer",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreateUserId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUserId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateUserId = "builder.seed",
                            CreatedDate = new DateTime(2022, 1, 14, 11, 36, 1, 382, DateTimeKind.Local).AddTicks(1621),
                            IsActive = true,
                            ModifyDate = new DateTime(2022, 1, 14, 11, 36, 1, 382, DateTimeKind.Local).AddTicks(1628),
                            ModifyUserId = "builder.seed",
                            PermissionId = 1,
                            RoleId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateUserId = "builder.seed",
                            CreatedDate = new DateTime(2022, 1, 14, 11, 36, 1, 382, DateTimeKind.Local).AddTicks(1631),
                            IsActive = true,
                            ModifyDate = new DateTime(2022, 1, 14, 11, 36, 1, 382, DateTimeKind.Local).AddTicks(1632),
                            ModifyUserId = "builder.seed",
                            PermissionId = 3,
                            RoleId = 2,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreateUserId = "builder.seed",
                            CreatedDate = new DateTime(2022, 1, 14, 11, 36, 1, 382, DateTimeKind.Local).AddTicks(1634),
                            IsActive = true,
                            ModifyDate = new DateTime(2022, 1, 14, 11, 36, 1, 382, DateTimeKind.Local).AddTicks(1635),
                            ModifyUserId = "builder.seed",
                            PermissionId = 2,
                            RoleId = 3,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreateUserId = "builder.seed",
                            CreatedDate = new DateTime(2022, 1, 14, 11, 36, 1, 382, DateTimeKind.Local).AddTicks(1636),
                            IsActive = true,
                            ModifyDate = new DateTime(2022, 1, 14, 11, 36, 1, 382, DateTimeKind.Local).AddTicks(1637),
                            ModifyUserId = "builder.seed",
                            PermissionId = 2,
                            RoleId = 4,
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreateUserId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FacultyId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifyUserId")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("School");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.AccountRole", b =>
                {
                    b.HasOne("Cerberus.Dashboard.Domain.Models.Account", "Account")
                        .WithMany("Roles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cerberus.Dashboard.Domain.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.Application", b =>
                {
                    b.HasOne("Cerberus.Dashboard.Domain.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cerberus.Dashboard.Domain.Models.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.Courses", b =>
                {
                    b.HasOne("Cerberus.Dashboard.Domain.Models.Application", null)
                        .WithMany("Courses")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cerberus.Dashboard.Domain.Models.Department", null)
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.Department", b =>
                {
                    b.HasOne("Cerberus.Dashboard.Domain.Models.School", null)
                        .WithMany("Departments")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.Faculty", b =>
                {
                    b.HasOne("Cerberus.Dashboard.Domain.Models.Institution", null)
                        .WithMany("Faculties")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.Institution", b =>
                {
                    b.HasOne("Cerberus.Dashboard.Domain.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.RolePermission", b =>
                {
                    b.HasOne("Cerberus.Dashboard.Domain.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cerberus.Dashboard.Domain.Models.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.School", b =>
                {
                    b.HasOne("Cerberus.Dashboard.Domain.Models.Faculty", null)
                        .WithMany("Schools")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.Account", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.Application", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.Department", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.Faculty", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.Institution", b =>
                {
                    b.Navigation("Faculties");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.Role", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Cerberus.Dashboard.Domain.Models.School", b =>
                {
                    b.Navigation("Departments");
                });
#pragma warning restore 612, 618
        }
    }
}
